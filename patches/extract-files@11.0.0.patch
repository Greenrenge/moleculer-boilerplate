diff --git a/package.json b/package.json
index 20884afa6ec6716cb017ffab2e66be76f8ea5da0..8741b83c34316fb8ca3abbe02906ba1a481906c6 100644
--- a/package.json
+++ b/package.json
@@ -34,6 +34,18 @@
       "import": "./public/index.mjs",
       "require": "./public/index.js"
     },
+    "./public/extractFiles": {
+      "import": "./public/extractFiles.mjs",
+      "require": "./public/extractFiles.js"
+    },
+    "./public/isExtractableFile": {
+      "import": "./public/isExtractableFile.mjs",
+      "require": "./public/isExtractableFile.js"
+    },
+    "./public/ReactNativeFile": {
+      "import": "./public/ReactNativeFile.mjs",
+      "require": "./public/ReactNativeFile.js"
+    },
     "./public/*": "./public/*",
     "./package": "./package.json",
     "./package.json": "./package.json"
diff --git a/public/ReactNativeFile.mjs b/public/ReactNativeFile.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..8245b05d624c935287ef92454f77e9adac20c0bd
--- /dev/null
+++ b/public/ReactNativeFile.mjs
@@ -0,0 +1,43 @@
+'use strict';
+
+/**
+ * Used to mark a
+ * [React Native `File` substitute]{@link ReactNativeFileSubstitute}
+ * in an object tree for [`extractFiles`]{@link extractFiles}. Itâ€™s too risky to
+ * assume all objects with `uri`, `type` and `name` properties are files to
+ * extract.
+ * @kind class
+ * @name ReactNativeFile
+ * @param {ReactNativeFileSubstitute} file A [React Native](https://reactnative.dev) [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) substitute.
+ * @example <caption>Ways to `import`.</caption>
+ * ```js
+ * import { ReactNativeFile } from 'extract-files';
+ * ```
+ *
+ * ```js
+ * import ReactNativeFile from 'extract-files/public/ReactNativeFile.js';
+ * ```
+ * @example <caption>Ways to `require`.</caption>
+ * ```js
+ * const { ReactNativeFile } = require('extract-files');
+ * ```
+ *
+ * ```js
+ * const ReactNativeFile = require('extract-files/public/ReactNativeFile.js');
+ * ```
+ * @example <caption>An extractable file in [React Native](https://reactnative.dev).</caption>
+ * ```js
+ * const file = new ReactNativeFile({
+ *   uri: uriFromCameraRoll,
+ *   name: 'a.jpg',
+ *   type: 'image/jpeg',
+ * });
+ * ```
+ */
+export default class ReactNativeFile {
+  constructor({ uri, name, type }) {
+    this.uri = uri;
+    this.name = name;
+    this.type = type;
+  }
+};
diff --git a/public/extractFiles.mjs b/public/extractFiles.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..6aa657a816b6883e6cd2d3bcd669e46b6a03e33a
--- /dev/null
+++ b/public/extractFiles.mjs
@@ -0,0 +1,153 @@
+'use strict';
+
+export { default as isExtractableFile } from './isExtractableFile.js';
+
+/**
+ * Clones a value, recursively extracting
+ * [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File),
+ * [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) and
+ * [`ReactNativeFile`]{@link ReactNativeFile} instances with their
+ * [object paths]{@link ObjectPath}, replacing them with `null`.
+ * [`FileList`](https://developer.mozilla.org/en-US/docs/Web/API/Filelist) instances
+ * are treated as [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File)
+ * instance arrays.
+ * @kind function
+ * @name extractFiles
+ * @param {*} value Value (typically an object tree) to extract files from.
+ * @param {ObjectPath} [path=''] Prefix for object paths for extracted files.
+ * @param {ExtractableFileMatcher} [isExtractableFile=isExtractableFile] The function used to identify extractable files.
+ * @returns {ExtractFilesResult} Result.
+ * @example <caption>Ways to `import`.</caption>
+ * ```js
+ * import { extractFiles } from 'extract-files';
+ * ```
+ *
+ * ```js
+ * import extractFiles from 'extract-files/public/extractFiles.js';
+ * ```
+ * @example <caption>Ways to `require`.</caption>
+ * ```js
+ * const { extractFiles } = require('extract-files');
+ * ```
+ *
+ * ```js
+ * const extractFiles = require('extract-files/public/extractFiles.js');
+ * ```
+ * @example <caption>Extract files from an object.</caption>
+ * For the following:
+ *
+ * ```js
+ * const file1 = new File(['1'], '1.txt', { type: 'text/plain' });
+ * const file2 = new File(['2'], '2.txt', { type: 'text/plain' });
+ * const value = {
+ *   a: file1,
+ *   b: [file1, file2],
+ * };
+ *
+ * const { clone, files } = extractFiles(value, 'prefix');
+ * ```
+ *
+ * `value` remains the same.
+ *
+ * `clone` is:
+ *
+ * ```json
+ * {
+ *   "a": null,
+ *   "b": [null, null]
+ * }
+ * ```
+ *
+ * `files` is a [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instance containing:
+ *
+ * | Key     | Value                        |
+ * | :------ | :--------------------------- |
+ * | `file1` | `['prefix.a', 'prefix.b.0']` |
+ * | `file2` | `['prefix.b.1']`             |
+ */
+export default function extractFiles(
+  value,
+  path = '',
+  isExtractableFile = defaultIsExtractableFile
+) {
+  // Map of extracted files and their object paths within the input value.
+  const files = new Map();
+
+  // Map of arrays and objects recursed within the input value and their clones,
+  // for reusing clones of values that are referenced multiple times within the
+  // input value.
+  const clones = new Map();
+
+  /**
+   * Recursively clones the value, extracting files.
+   * @kind function
+   * @name extractFiles~recurse
+   * @param {*} value Value to extract files from.
+   * @param {ObjectPath} path Prefix for object paths for extracted files.
+   * @param {Set} recursed Recursed arrays and objects for avoiding infinite recursion of circular references within the input value.
+   * @returns {*} Clone of the value with files replaced with `null`.
+   * @ignore
+   */
+  function recurse(value, path, recursed) {
+    let clone = value;
+
+    if (isExtractableFile(value)) {
+      clone = null;
+
+      const filePaths = files.get(value);
+
+      filePaths ? filePaths.push(path) : files.set(value, [path]);
+    } else {
+      const isList =
+        Array.isArray(value) ||
+        (typeof FileList !== 'undefined' && value instanceof FileList);
+      const isObject = value && value.constructor === Object;
+
+      if (isList || isObject) {
+        const hasClone = clones.has(value);
+
+        if (hasClone) clone = clones.get(value);
+        else {
+          clone = isList ? [] : {};
+
+          clones.set(value, clone);
+        }
+
+        if (!recursed.has(value)) {
+          const pathPrefix = path ? `${path}.` : '';
+          const recursedDeeper = new Set(recursed).add(value);
+
+          if (isList) {
+            let index = 0;
+
+            for (const item of value) {
+              const itemClone = recurse(
+                item,
+                pathPrefix + index++,
+                recursedDeeper
+              );
+
+              if (!hasClone) clone.push(itemClone);
+            }
+          } else
+            for (const key in value) {
+              const propertyClone = recurse(
+                value[key],
+                pathPrefix + key,
+                recursedDeeper
+              );
+
+              if (!hasClone) clone[key] = propertyClone;
+            }
+        }
+      }
+    }
+
+    return clone;
+  }
+
+  return {
+    clone: recurse(value, path, new Set()),
+    files,
+  };
+};
diff --git a/public/isExtractableFile.mjs b/public/isExtractableFile.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..f32cbe7376fe05c5742dd140d09046fe375e65ad
--- /dev/null
+++ b/public/isExtractableFile.mjs
@@ -0,0 +1,34 @@
+'use strict';
+import ReactNativeFile from './ReactNativeFile.mjs';
+
+/**
+ * Checks if a value is an [extractable file]{@link ExtractableFile}.
+ * @kind function
+ * @name isExtractableFile
+ * @type {ExtractableFileMatcher}
+ * @param {*} value Value to check.
+ * @returns {boolean} Is the value an [extractable file]{@link ExtractableFile}.
+ * @example <caption>Ways to `import`.</caption>
+ * ```js
+ * import { isExtractableFile } from 'extract-files';
+ * ```
+ *
+ * ```js
+ * import isExtractableFile from 'extract-files/public/isExtractableFile.js';
+ * ```
+ * @example <caption>Ways to `require`.</caption>
+ * ```js
+ * const { isExtractableFile } = require('extract-files');
+ * ```
+ *
+ * ```js
+ * const isExtractableFile = require('extract-files/public/isExtractableFile.js');
+ * ```
+ */
+export default function isExtractableFile(value) {
+  return (
+    (typeof File !== 'undefined' && value instanceof File) ||
+    (typeof Blob !== 'undefined' && value instanceof Blob) ||
+    value instanceof ReactNativeFile
+  );
+};
